{"version":3,"sources":["assets/undraw_winners.svg","assets/undraw_adventure.svg","Components/Question.js","Components/Home.js","Components/Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","props","checkAnswer","e","isAnswerPicked","correctAnswer","document","getElementById","quizAnswerIndex","Number","target","id","incorrectAnswer","closest","className","insertAdjacentHTML","addPoint","hideNext","labels","src","cardImage","alt","quizFlagVersion","questionSet","capital","flag","map","country","key","onClick","name","nextQuestion","Home","startQuiz","Results","resultsImage","quizCorrectAnswers","App","setState","home","quizPage","resetQuizData","countrySelects","length","r","Math","floor","random","indexOf","push","getQuizData","quizSelects","quizData","console","log","i","item","state","countryData","find","el","j","renderPage","prevState","choices","querySelectorAll","choiceIcons","forEach","choice","remove","page","questionsPerPage","start","end","slice","_isMounted","error","isLoaded","items","this","axios","get","then","res","data","isLoading","catch","err","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.95bfb481.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_winners.82d9605a.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_adventure.eae25da4.svg\";","import React from \"react\";\nimport cardImage from \"../assets/undraw_adventure.svg\";\n\n//Note - filter out countries without capitals? e.g., McDonald Isalnd?\n\nconst Question = (props) => {\n  const questionA = () => {\n    return (\n      <div>\n        <h2 className=\"question\">\n          {props.questionSet[props.quizAnswerIndex].capital} is the capital of\n          ... ?\n        </h2>\n      </div>\n    );\n  };\n\n  const questionB = () => {\n    return (\n      <div>\n        <img\n          src={props.questionSet[props.quizAnswerIndex].flag}\n          className=\"flag-img\"\n          alt=\"flag\"\n        ></img>\n        <h2 className=\"question\">Which country does this flag belong to? </h2>\n      </div>\n    );\n  };\n\n  const checkAnswer = (e) => {\n\n    if (!props.isAnswerPicked) {\n\n    //check if IDs match\n    let correctAnswer = document.getElementById(props.quizAnswerIndex);\n    const correctIcon = `<i class=\"material-icons\">check_circle_outline</i>`;\n    const incorrectIcon = `<i class=\"material-icons\">highlight_off</i>`;\n\n    if (Number(e.target.id) !== props.quizAnswerIndex) {\n      let incorrectAnswer = e.target.closest(\".answer-choice\");\n      incorrectAnswer.className = \"answer-choice incorrect\";\n      incorrectAnswer.insertAdjacentHTML(\"beforeend\", incorrectIcon);\n    }\n\n    if (Number(e.target.id) === props.quizAnswerIndex) {\n      props.addPoint();\n    }\n\n    correctAnswer.className = \"answer-choice correct\";\n    correctAnswer.insertAdjacentHTML(\"beforeend\", correctIcon);\n\n  }\n\n    props.hideNext();\n  };\n\n  let labels = [\"A\", \"B\", \"C\", \"D\"];\n  return (\n    <div>\n      <img src={cardImage} className=\"card-img\" alt=\"people\"></img>\n      <div className=\"card-container__inner\">\n        {props.quizFlagVersion ? questionA() : questionB()}\n\n        <ul className=\"answer-choices\">\n          {props.questionSet.map((country, id) => (\n            <li\n              id={id}\n              key={id}\n              className=\"answer-choice\"\n              onClick={checkAnswer}\n            >\n              <span className=\"label\">{labels[id]}</span> {country.name}{\" \"}\n            </li>\n          ))}\n        </ul>\n        {props.isAnswerPicked ? (\n          <button className=\"nxt-btn\" onClick={() => props.nextQuestion()}>\n            Next\n          </button>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Question;\n","import React from \"react\";\nimport cardImage from \"../assets/undraw_adventure.svg\";\n\nconst Home = (props) => (\n  <div className=\"home-card\">\n    <img src={cardImage} className=\"card-img\" alt=\"people\"></img>\n    <h2>Quiz yourself by identifying country capitals and flags!</h2>\n    <button className=\"start-btn\" onClick={props.startQuiz}>\n      Start!\n    </button>\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\nimport resultsImage from \"../assets/undraw_winners.svg\";\n\nconst Results = (props) => {\n  return (\n    <div className=\"results-card\">\n      <img alt=\"winner img\" src={resultsImage}></img>\n      <h2>Results</h2>\n      <p>\n        You got{\" \"}\n        <span className=\"correct-count\">{ props.quizCorrectAnswers }</span>{\" \"}\n        correct answer{props.quizCorrectAnswers > 1 ? 's' : ''}\n      </p>\n      <button onClick={() => props.startQuiz()}>Try again</button>\n    </div>\n  );\n};\n\nexport default Results;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Question from \"./Components/Question\";\nimport Home from \"./Components/Home\";\nimport Results from \"./Components/Results\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      home: true,\n      error: null,\n      isLoaded: false,\n      items: [],\n      countrySelects: [],\n      countryData: [],\n      quizData: [],\n      questionSet: [],\n      quizFlagVersion: true,\n      quizPage: 1,\n      quizAnswerIndex: 0,\n      quizCorrectAnswers: 0,\n      isAnswerPicked: false,\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    axios\n      .get(\"https://restcountries.eu/rest/v2/all\")\n      .then((res) => {\n        if (this._isMounted) {\n          const countryData = res.data;\n          this.setState({\n            error: false,\n            countryData,\n            isLoading: false,\n          });\n        } else {\n          this.setState({\n            error: true,\n            isLoading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          error: true,\n          isLoading: false,\n        });\n      });\n  }\n\n  startQuiz = () => {\n    this.setState({\n      home: false,\n      quizPage: 1,\n      quizCorrectAnswers: 0,\n    });\n\n    this.resetQuizData();\n  };\n\n  resetQuizData = () => {\n    var countrySelects = [];\n    while (countrySelects.length < 24) {\n      var r = Math.floor(Math.random() * 250);\n      //make sure country isn't included already\n      if (countrySelects.indexOf(r) === -1) countrySelects.push(r);\n    }\n    this.setState({ countrySelects });\n    this.getQuizData(countrySelects);\n  };\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getQuizData = (countrySelects) => {\n    //filter the quizData\n    let quizSelects = countrySelects;\n    let quizData = [];\n    console.log(quizSelects);\n\n    //in all the data, find the country whose index matches the value in the selects list\n    for (var i = 0; i < quizSelects.length; i++) {\n      \n        let item = this.state.countryData.find((el, j) => quizSelects[i] === j)\n        quizData.push(item);\n    }\n\n    this.setState({ quizData });\n    this.renderPage(quizData, 1);\n  };\n\n  hideNext = () => {\n    this.setState({ isAnswerPicked: true });\n  };\n\n  addPoint = () => {\n    this.setState((prevState) => ({\n      quizCorrectAnswers: prevState.quizCorrectAnswers++,\n    }));\n  };\n\n  nextQuestion = () => {\n    this.setState((prevState) => ({\n      isAnswerPicked: false,\n      quizFlagVersion: !prevState.quizFlagVersion,\n    }));\n\n    //clear any right/wrong colors and icons for next question\n    let choices = document.querySelectorAll(\".answer-choice\");\n    let choiceIcons = document.querySelectorAll(\".material-icons\");\n\n    choices.forEach((item) => (item.className = \"answer-choice\"));\n    choiceIcons.forEach((choice) => choice.remove());\n\n    console.log(this.state.quizData, this.state.quizPage);\n    this.renderPage(this.state.quizData, this.state.quizPage);\n  };\n\n  renderPage = (quizData, page = this.state.quizPage, questionsPerPage = 4) => {\n    console.log(quizData);\n    console.log(page);\n    const start = (page - 1) * questionsPerPage;\n    const end = questionsPerPage * page;\n\n    let questionSet = quizData.slice(start, end);\n    console.log(questionSet);\n\n    var quizAnswerIndex = Math.floor(Math.random() * 4);\n    this.setState({ questionSet, quizAnswerIndex });\n    this.setState((prevState) => ({ quizPage: prevState.quizPage++ }));\n  };\n\n  render() {\n    const { quizAnswerIndex, quizFlagVersion, questionSet, isAnswerPicked, quizCorrectAnswers } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          <h1>Country Quiz</h1>\n          <div className=\"card-container\">\n            {this.state.home ? (\n              <Home startQuiz={() => this.startQuiz()} />\n            ) : this.state.quizPage <= 7 ? (\n              <Question\n                quizAnswerIndex={quizAnswerIndex}\n                quizFlagVersion={quizFlagVersion}\n                questionSet={questionSet}\n                nextQuestion={this.nextQuestion}\n                isAnswerPicked={isAnswerPicked}\n                hideNext={this.hideNext}\n                addPoint={this.addPoint}\n              />\n            ) : (\n              <Results\n                quizCorrectAnswers={quizCorrectAnswers}\n                resetQuizData={this.resetQuizData}\n                startQuiz={this.startQuiz}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}